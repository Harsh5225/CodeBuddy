"I have resumed work after my exams ended"

Day 1

Tasks Completed:

1. Signup & Login Pages:

   . Designed and implemented the UI for both signup and login functionality.
   . Integrated form inputs and basic structure for authentication.

2. Form Validation using Zod:

   .Implemented schema-based form validation using **Zod** to ensure data correctness before sending requests to the backend.
   .Defined Zod schemas for both signup and login forms.

3. Zod Integration with React Hook Form:

   .Installed and configured `@hookform/resolvers/zod` to connect Zod with React Hook Form.
   .Used Zod resolver to validate inputs in real-time and display error messages on the form.





---

## üìò Day 2 ‚Äì Redux Toolkit Authentication (Text Format)

---

### 1. **Objective**

* Build a scalable and clean auth flow.
* Use Redux Toolkit with `createAsyncThunk` and `createSlice`.
* Interact with a backend API using Axios for registration, login, checking auth, and logout.

---

### 2. **File Breakdown**

* `authSlice.js`: Contains auth state and reducers.
* `axiosClient.js`: Axios instance for consistent API calls.
* `store.js`: Redux store setup to manage slices globally.

---

### 3. **`createAsyncThunk` Explained**

* Handles async logic like API calls.
* Generates 3 action types automatically:

  * `pending`: When request is sent.
  * `fulfilled`: When request is successful.
  * `rejected`: When request fails.

---

### 4. **Async Thunks Defined**

* `registerUser`: Sends a POST request to `/user/register`.
* `loginUser`: Sends a POST request to `/user/login`.
* `checkAuth`: Sends a GET request to `/user/check`.
* `logoutUser`: Sends a POST request to `/logout`.

Each thunk uses:

```js
try {
  const res = await axiosClient.get/post(...);
  return res.data;
} catch (err) {
  return rejectWithValue(err);
}
```

---

### 5. **authSlice Initial State**

```js
{
  user: "",              // Stores user info
  isAuthenticated: "",   // true/false based on auth check
  loading: "",           // true during API calls
  error: ""              // Stores error messages
}
```

---

### 6. **Reducers using `.addCase()`**

For each thunk (e.g., `registerUser`, `loginUser`, etc.):

* `.pending`: Set `loading = true`, clear `error`.
* `.fulfilled`:

  * Set `loading = false`.
  * Set `user` to `action.payload`.
  * Set `isAuthenticated` to `!!action.payload` (truthy check).
* `.rejected`:

  * Set `loading = false`.
  * Set `error` to `action.payload.message || "Something went wrong"`.
  * Clear `user` and set `isAuthenticated = false`.

---

 7. Why !!action.payload is Used

   .Converts a value to a boolean:

  * `!!null` ‚Üí `false`
  * `!!{}` ‚Üí `true`
* So you can check if a payload exists before setting `isAuthenticated`.


8.Axios Client Configuration

In `axiosClient.js`:
js
const axiosClient = axios.create({
  baseURL: "http://localhost:3000",
  withCredentials: true,
  headers: {
    "Content-Type": "application/json"
  }
});

   .`withCredentials: true` is crucial for session cookies.
   . `baseURL` centralizes the API root for reuse.

---
9.Store Setup (`store.js`)

import { configureStore } from "@reduxjs/toolkit";
import authReducer from "../features/auth/authSlice";

export const store = configureStore({
  reducer: {
    auth: authReducer,
  },
});


   .Registers `auth` slice into the Redux store.
   .Accessible throughout the app via `useSelector()` and `useDispatch()`.


Summary:

   .Created full async login/register/logout/auth-check logic.
   .Set up Axios for centralized API calls.
   .Managed different states (`loading`, `user`, `isAuthenticated`, `error`) cleanly in Redux.
   .Prepared your app for integrating UI components and session handling.



Here‚Äôs a clean, well-structured note for your reference:

---

## üîê How to Protect Tokens from Unauthorized Use (e.g. via Postman)

### üéØ Problem:

CORS only protects against **browser-based cross-origin** requests. If someone obtains your token (JWT/session token), **tools like Postman, curl, or scripts can still access your APIs**, since they bypass CORS entirely.

---

### ‚úÖ Server-Side Strategies to Tackle This:

#### 1. **Bind Token to Client Context (Fingerprinting)**

* Store client metadata when the token is issued:

  * IP address
  * User-Agent string
  * Device fingerprint
* On each request, **verify** the metadata matches the stored values.
* Block access if there's a mismatch.

> Example (pseudo-middleware):

```js
if (storedIP !== requestIP || storedUA !== requestUserAgent) {
   reject("Suspicious token usage");
}
```

---

#### 2. **Use Short-Lived Access Tokens + Refresh Tokens**

* Access Token: Valid for a short time (5‚Äì15 mins)
* Refresh Token: Longer lifespan, stored securely (e.g. HttpOnly cookie)
* Limits the window of attack if a token is stolen.

---

#### 3. **IP or Geo-Based Restrictions**

* Detect and block/alert on sudden changes in:

  * IP address
  * Geo-location (country, region)
* Useful for highly sensitive applications (e.g. banking)

---

#### 4. **Token Revocation / Blacklisting**

* Store active tokens in a **revocation list** (e.g. Redis or DB)
* Invalidate tokens on:

  * Logout
  * Suspicious activity
  * Manual admin action

---

#### 5. **Rate Limiting and Behavior Monitoring**

* Use rate limits per:

  * IP address
  * Access token
* Monitor usage patterns and alert/deny on abnormal behaviors.
* Integrate services like:

  * AWS WAF
  * Cloudflare Bot Management

---

#### 6. **Secure Token Storage & Delivery**

* Always use **HTTPS** to prevent MITM attacks.
* Store tokens in:

  * **HttpOnly** cookies (prevents XSS)
  * Avoid `localStorage` for sensitive tokens
* Set `Secure` and `SameSite` attributes on cookies.

---

### üìù Summary

CORS doesn't protect APIs from Postman or curl.
To secure APIs:

* Validate token context (IP, user-agent)
* Use short-lived tokens + refresh tokens
* Track and revoke tokens
* Monitor suspicious activity

---

Let me know if you want this note exported as a PDF or markdown file!



Without isLoading:
Page Load ‚Üí Show Login Page ‚Üí Auth Check Completes ‚Üí Show Home Page
                 ^                                      ^
                 |                                      |
                 +----- This causes the flash ----------+

With isLoading:
Page Load ‚Üí Show Loading Spinner ‚Üí Auth Check Completes ‚Üí Show Home Page
                 ^                                           ^
                 |                                           |
                 +--- No flash, just a smooth transition ----+


window.location.pathname = help in finding the current path of the page